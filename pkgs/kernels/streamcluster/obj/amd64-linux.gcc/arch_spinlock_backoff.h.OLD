#pragma once

static inline void
relax(volatile int iterations)
{
    for (/*above*/; iterations > 0; iterations--);
//        __insn_mfspr(SPR_PASS);
    __asm__ __volatile__("" ::: "memory");
    //#define barrier() __asm__ __volatile__("" ::: "memory") // TODO: maybe wrong!
    //barrier();
}

/* Perform bounded exponential backoff.*/
static void delay_backoff(int iterations)
{
    uint32_t exponent, loops;

    /*
     * 2^exponent is how many times we go around the loop,
     * which takes 8 cycles.  We want to start with a 16- to 31-cycle
     * loop, so we need to go around minimum 2 = 2^1 times, so we
     * bias the original value up by 1.
     */
    exponent = iterations + 1;

    /*
     * Don't allow exponent to exceed 7, so we have 128 loops,
     * or 1,024 (to 2,047) cycles, as our maximum.
     */
    if (exponent > 8)
        exponent = 8;

    loops = 1 << exponent;

    /* Add a randomness factor so two cpus never get in lock step. */
#define get_cycles_low() __insn_mfspr(SPR_CYCLE)   /* just get all 64 bits */
    register unsigned long stack_pointer __asm__("sp");
    loops += __insn_crc32_32(stack_pointer, stack_pointer/*get_cycles_low()*/) &
        (loops - 1);

    relax(loops);
}

/**
 * Test-and-set spin lock with backoff
 */

#define PREFIX_SPIN_LOCK_NAME(x) backoff##_##x
#define LOCK PREFIX_SPIN_LOCK_NAME(lock)

typedef uint32_t LOCK /*__attribute__((aligned(CHIP_L2_LINE_SIZE())))*/;

static inline
void PREFIX_SPIN_LOCK_NAME(initialize_lock)(LOCK *p_lock) {
	__insn_mf();
	*p_lock = 0;
}

/* IMPORTANT: 'true' means 'failure' as in x_try_lock_spin() */
static inline
bool_t PREFIX_SPIN_LOCK_NAME(try_acquire_lock)(LOCK *p_lock) {
	__insn_mf();
	return(__insn_exch4(p_lock, 1) != 0);
}

static inline
void PREFIX_SPIN_LOCK_NAME(acquire_lock_without_preemption)(LOCK *p_lock) {
	__insn_mf();
	int iterations = 0;
	while(__insn_exch4(p_lock, 1) != 0) delay_backoff(iterations++);
}

// Reference: 'arch/arm_gcc/mpcore/chip_config_tool.h'
#define backoff_ACQUIRE_NESTED_LOCK do { \
		int iterations = 0; \
		PCB     *p_pcb; \
		__insn_mf(); /* TODO: check this */ \
		while(__insn_exch4(p_lock, 1) != 0) { \
			p_pcb = get_my_p_pcb(); \
			if (p_pcb->p_firstlock == NULL) { \
				return true; \
			} \
			delay_backoff(iterations++); \
		} \
		return false; \
} while(0)

static inline
void PREFIX_SPIN_LOCK_NAME(release_lock)(LOCK *p_lock) {
	__insn_mf();
	*p_lock = 0;
}

#undef LOCK
#undef PREFIX_SPIN_LOCK_NAME
